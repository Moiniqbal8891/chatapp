const pool = require("../database");
const bcrypt = require("bcrypt");
<<<<<<< HEAD
var jwt = require("jsonwebtoken");
=======
const jwt = require("jsonwebtoken");

>>>>>>> 1679cef42252e29e857eb9c8f644b3977e5e37a3
const Signup = async (req, res) => {
  try {
    // Check if the necessary fields are in the request body
    const { id, name, email, password } = req.body;
    if (!id || !name || !email || !password) {
      return res.status(400).json({ message: "All fields are required" });
    }
    console.log("Received user data:", { id, name, email, password });
    const hashedPassword = await bcrypt.hash(password, 10);
    const signup_query =
      "INSERT INTO users (id, name, email, password) VALUES ($1, $2, $3, $4)";
    const response = await pool.query(signup_query, [
      id,
      name,
      email,
      hashedPassword,
    ]);
    res
      .status(200)
      .json({ success: true, message: "New role Registered successfully" });
  } catch (error) {
    console.error(error);
  }
};
const Login = async (req, res) => {
  const { email, password } = req.body;

  try {
    const query = "SELECT * FROM users WHERE email = $1";
    const user = await pool.query(query, [email]);
    if (user.rowCount === 0) {
      return res.status(200).json({
        success: false,
        message: "No user found!",
      });
    }
    const validPassword = await bcrypt.compare(password, user.rows[0].password);
    if (!validPassword) {
      return res
        .status(401)
        .json({ success: false, message: "Invalid password" });
    }
    const token = jwt.sign(
      {
<<<<<<< HEAD
        id: user.id,
        name: user.name,
        email: user.email,
      },
      "shhhhh",
      { expiresIn: "1h" }
    );
=======
        id: user.rows[0].id, // Accessing id from the first row of the result
        name: user.rows[0].name, // Accessing name from the first row of the result
        email: user.rows[0].email, // Accessing email from the first row of the result
      },
      "shhhhh", // Secret key for signing
      { expiresIn: "1h" } // Token expiration time
    );

>>>>>>> 1679cef42252e29e857eb9c8f644b3977e5e37a3
    return res.status(200).json({
      success: true,
      message: "Login Successfully, Redirecting",
      user: user.rows[0],
      token: token,
    });
  } catch (error) {
    console.error("Login error:", error);
    return res.status(500).json({
      success: false,
      message: "Something went wrong. Please try again later.",
      error: error.message, // you can remove this in production
    });
  }
};

module.exports = { Signup, Login };
